// Code generated by go generate;
package quiz

import (
	"encoding/json"
	"flag"
	"log"
	"strconv"
	"strings"

	"github.com/3d0c/cli/pkg"

	"github.com/3d0c/quiz/pkg/rpc"
)

type arrayFlags []string

func (i *arrayFlags) String() string {
	return strings.Join(*i, " ")
}

func (i *arrayFlags) Set(value string) error {
	*i = append(*i, strings.TrimSpace(value))
	return nil
}

type answers struct {
	*cli.General

	addr     string
	endpoint string
	q        arrayFlags
}

func init() {
	cli.Register("quiz.answers", &answers{General: &cli.General{}})
}

func (cmd *answers) Register(f *flag.FlagSet) {
	cmd.General.Register(f)
	f.StringVar(&cmd.addr, "addr", "127.0.0.1:5560", "quiz server location")
	f.Var(&cmd.q, "q", "qa in format qid:aid")
}

func (cmd *answers) Description() string {
	return `
Description:
	Answer QUIZ question(s).

Examples:
	; answer question id=1 with answer id=1
	q-client quiz.answers -q=1:1

	; answer multiple questions
	q-client quiz.answers -q=1:1 -q=2:1 -q=3:1
	`
}

func (cmd *answers) Process() error {
	if len(cmd.q) == 0 {
		return cli.ErrFlagRequired("q")
	}

	cmd.endpoint = "http://" + cmd.addr + "/answers" + "/" + key()
	return nil
}

func (cmd *answers) Run(f *flag.FlagSet) ([]byte, error) {
	type answer struct {
		Qid int
		Aid int
	}

	type tmp struct {
		Answers []answer
	}

	t := tmp{Answers: make([]answer, 0)}

	for _, pair := range cmd.q {
		parts := strings.Split(pair, ":")
		if len(parts) != 2 {
			log.Printf("Wrong format for '%s', skip\n", pair)
			continue
		}

		qid, err := strconv.Atoi(parts[0])
		if err != nil {
			log.Printf("Wrong format for '%s', skip\n", pair)
			continue
		}

		aid, err := strconv.Atoi(parts[1])
		if err != nil {
			log.Printf("Wrong format for '%s', skip\n", pair)
			continue
		}

		t.Answers = append(t.Answers, answer{Qid: qid, Aid: aid})
	}

	payload, err := json.Marshal(t)
	if err != nil {
		return nil, err
	}

	result, err := rpc.Post(cmd.endpoint, payload, nil)
	if err != nil {
		return result, err
	}

	return []byte("done\n"), nil
}
