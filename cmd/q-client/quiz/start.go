// Code generated by go generate;
package quiz

import (
	"encoding/json"
	"flag"
	"os"

	"github.com/3d0c/cli/pkg"

	"github.com/3d0c/quiz/cmd/q-server/handlers"
	"github.com/3d0c/quiz/cmd/q-server/models/sessions"
	"github.com/3d0c/quiz/pkg/rpc"
)

const sessionfile = "/tmp/q-session"

func key() string {
	b := make([]byte, sessions.KeyLength*2)

	r, err := os.OpenFile(sessionfile, os.O_RDONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer r.Close()

	n, err := r.Read(b)
	if err != nil {
		panic(err)
	}
	if n != sessions.KeyLength*2 {
		panic("wrong session key length")
	}

	return string(b)
}

type start struct {
	*cli.General

	addr     string
	endpoint string
}

func init() {
	cli.Register("quiz.start", &start{General: &cli.General{}})
}

func (cmd *start) Register(f *flag.FlagSet) {
	cmd.General.Register(f)
	f.StringVar(&cmd.addr, "addr", "127.0.0.1:5560", "quiz server location")
}

func (cmd *start) Description() string {
	return `
Description:	
	Start QUIZ.
	To start quiz you have to receive a session key. It will be saved in temporary folder /tmp.
	Do not forget to run "end" command to release a key.

Examples:
	; start quiz
	q-client quiz.start

	; optionally define quiz server
	q-client quiz.start -addr=192.168.0.10:5560
	`
}

func (cmd *start) Process() error {
	cmd.endpoint = "http://" + cmd.addr + "/sessions"
	return nil
}

func (cmd *start) Run(f *flag.FlagSet) ([]byte, error) {
	result, err := rpc.Post(cmd.endpoint, []byte{}, nil)
	if err != nil {
		return result, err
	}

	var tmp handlers.SessionsHandler

	if err = json.Unmarshal(result, &tmp); err != nil {
		return nil, err
	}

	w, err := os.OpenFile(sessionfile, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0644)
	if err != nil {
		return nil, err
	}

	if _, err = w.Write([]byte(tmp.Key)); err != nil {
		return nil, err
	}

	return []byte("done\n"), nil
}
